name: io-streams
version: 1.2.1.2
id: io-streams-1.2.1.2-25fa96482b1e85185346361878ba1776
license: BSD3
copyright:
maintainer: Gregory Collins <greg@gregorycollins.net>
stability:
homepage:
package-url:
synopsis: Simple, composable, and easy-to-use stream I/O
description: /Overview/
             .
             The io-streams library contains simple and easy-to-use primitives for I/O
             using streams. Most users will want to import the top-level convenience
             module "System.IO.Streams", which re-exports most of the library:
             .
             @
             import           System.IO.Streams (InputStream, OutputStream)
             import qualified System.IO.Streams as Streams
             @
             .
             For first-time users, @io-streams@ comes with an included tutorial, which can
             be found in the "System.IO.Streams.Tutorial" module.
             .
             /Features/
             .
             The @io-streams@ user API has two basic types: @InputStream a@ and
             @OutputStream a@, and three fundamental I/O primitives:
             .
             @
             \-\- read an item from an input stream
             Streams.read :: InputStream a -> IO (Maybe a)
             .
             \-\- push an item back to an input stream
             Streams.unRead :: a -> InputStream a -> IO ()
             .
             \-\- write to an output stream
             Streams.write :: Maybe a -> OutputStream a -> IO ()
             @
             .
             Streams can be transformed by composition and hooked together with provided combinators:
             .
             @
             ghci> Streams.fromList [1,2,3::Int] >>= Streams.map (*10) >>= Streams.toList
             [10,20,30]
             @
             .
             Stream composition leaves the original stream accessible:
             .
             @
             ghci> input \<- Streams.fromByteString \"long string\"
             ghci> wrapped \<- Streams.takeBytes 4 input
             ghci> Streams.read wrapped
             Just \"long\"
             ghci> Streams.read wrapped
             Nothing
             ghci> Streams.read input
             Just \" string\"
             @
             .
             Simple types and operations in the IO monad mean straightforward and simple
             exception handling and resource cleanup using Haskell standard library
             facilities like 'Control.Exception.bracket'.
             .
             @io-streams@ comes with:
             .
             * functions to use files, handles, concurrent channels, sockets, lists,
             vectors, and more as streams.
             .
             * a variety of combinators for wrapping and transforming streams, including
             compression and decompression using zlib, controlling precisely how many
             bytes are read from or written to a stream, buffering output using
             bytestring builders, folds, maps, filters, zips, etc.
             .
             * support for parsing from streams using @attoparsec@.
             .
             * support for spawning processes and communicating with them using streams.
category: Data, Network, IO-Streams
author:
exposed: True
exposed-modules: System.IO.Streams System.IO.Streams.Attoparsec
                 System.IO.Streams.Builder System.IO.Streams.ByteString
                 System.IO.Streams.Combinators System.IO.Streams.Concurrent
                 System.IO.Streams.Core System.IO.Streams.Debug
                 System.IO.Streams.Handle System.IO.Streams.File
                 System.IO.Streams.List System.IO.Streams.Network
                 System.IO.Streams.Process System.IO.Streams.Text
                 System.IO.Streams.Vector System.IO.Streams.Zlib
                 System.IO.Streams.Internal System.IO.Streams.Tutorial
hidden-modules: System.IO.Streams.Internal.Attoparsec
                System.IO.Streams.Internal.Network
                System.IO.Streams.Internal.Search
trusted: False
import-dirs: /home/tripod/projects/WisRegister/.cabal-sandbox/lib/x86_64-linux-ghc-7.8.4/io-streams-1.2.1.2
library-dirs: /home/tripod/projects/WisRegister/.cabal-sandbox/lib/x86_64-linux-ghc-7.8.4/io-streams-1.2.1.2
hs-libraries: HSio-streams-1.2.1.2
extra-libraries:
extra-ghci-libraries:
include-dirs:
includes:
depends: attoparsec-0.12.1.2-ca2b8723eb912468314465e5655a1556
         base-4.7.0.2-bfd89587617e381ae01b8dd7b6c7f1c1
         blaze-builder-0.3.3.4-0008326cf8c7651836930984c688f445
         bytestring-0.10.4.0-d6f1d17d717e8652498cab8269a0acd5
         network-2.6.0.2-9fc722f006cccfc46fd09710d2f526e7
         primitive-0.5.4.0-16de88d6e87d483d63f4f882cdb55b93
         process-1.2.0.0-06c3215a79834ce4886ae686a0f81122
         text-1.2.0.4-45eb55624ad282a004669092880e4171
         time-1.4.2-9b3076800c33f8382c38628f35717951
         transformers-0.4.2.0-686fc2d26d56633b2083390fb3ada21a
         vector-0.10.12.2-b69f56607460bcff4b627357cbec3b0f
         zlib-bindings-0.1.1.5-b7fd74d29b9d6ba1747d0b7146716abf
hugs-options:
cc-options:
ld-options:
framework-dirs:
frameworks:
haddock-interfaces: /home/tripod/projects/WisRegister/.cabal-sandbox/share/doc/x86_64-linux-ghc-7.8.4/io-streams-1.2.1.2/html/io-streams.haddock
haddock-html: /home/tripod/projects/WisRegister/.cabal-sandbox/share/doc/x86_64-linux-ghc-7.8.4/io-streams-1.2.1.2/html
